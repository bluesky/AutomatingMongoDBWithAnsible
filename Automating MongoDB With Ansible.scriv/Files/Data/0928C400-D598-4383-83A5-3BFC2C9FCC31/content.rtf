{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Palatino-Bold;\f2\froman\fcharset0 Palatino-Roman;
\f3\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl288\slmult1\sb320\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_H::2><$Scr_Ps::0>
\f1\b\fs32 Tools used in this book\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 <!$Scr_H::2><!$Scr_Ps::0>
\f2\fs26 \
Obviously MongoDB and Ansible are used in this book but we also use a bunch of other DevOps tools. These tools allow us to build things smart, faster and with higher quality. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl288\slmult1\sb320\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_H::2><$Scr_Ps::0>
\f1\b\fs32 Docker - {\field{\*\fldinst{HYPERLINK "https://www.docker.com/"}}{\fldrslt 
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 https://www.docker.com/}}
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \ulnone <!$Scr_H::2><!$Scr_Ps::0>
\f2\fs26 \
Docker is very fashionable in the DevOps world. We make use of Docker in this book to quickly test Ansible roles through molecule. Traditional Virtual Machines can be slow to start up and can slow down our testing. We want to keep our feedback loop as short as possible. Docker helps us to do that.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl288\slmult1\sb320\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_H::2><$Scr_Ps::0>
\f1\b\fs32 VirtualBox - {\field{\*\fldinst{HYPERLINK "https://www.virtualbox.org/"}}{\fldrslt 
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul https://www.virtualbox.org/}}
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \ulnone <!$Scr_H::2><!$Scr_Ps::0>
\f2\fs26 \
Sometimes a Docker container just isn\'92t enough! If you\'92re doing anything digging into the Linux Kernel then Docker may not be an option. For many types of systems we might want to deploy to a full Operating System rather than a container. We use VirtualBox here to give you the experience of deploying to real systems.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl288\slmult1\sb320\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_H::2><$Scr_Ps::0>
\f1\b\fs32 Vagrant - {\field{\*\fldinst{HYPERLINK "https://www.vagrantup.com/"}}{\fldrslt 
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul https://www.vagrantup.com/}}
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \ulnone <!$Scr_H::2><!$Scr_Ps::0>
\f2\fs26  \
Vagrant is a tool, written in Ruby, that allows us to automate the production of Virtual Machines. We declare what we want using Ruby Syntax and then we can reproduce the desired environment over and over again.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl288\slmult1\sb320\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_H::2><$Scr_Ps::0>
\f1\b\fs32 Molecule - {\field{\*\fldinst{HYPERLINK "https://molecule.readthedocs.io/en/latest/"}}{\fldrslt 
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul https://molecule.readthedocs.io/en/latest/}}
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \ulnone <!$Scr_H::2><!$Scr_Ps::0>
\f2\fs26 \
Molecule is an Ansible sub-project that aids the development of Ansible Roles. Essentially is functions as a glue between a bunch of other tools allowing us to Unit Test our deployments. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl288\slmult1\sb320\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_H::2><$Scr_Ps::0>
\f1\b\fs32 TestInfra - {\field{\*\fldinst{HYPERLINK "https://testinfra.readthedocs.io/en/latest/"}}{\fldrslt 
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul https://testinfra.readthedocs.io/en/latest/}}
\f3\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\ul \
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \ulnone <!$Scr_H::2><!$Scr_Ps::0>
\f2\fs26 \
TestInfra enables you to write Unit Tests with Python to validate the current state of your servers. TestInfra allows third-party validation of your deployments often within a few short seconds. TestInfra can test such things as; \
\
\pard\tx220\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\fi-720\sl264\slmult1\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}Is a service running? \
{\listtext	\uc0\u8226 	}Is a package installed?\
{\listtext	\uc0\u8226 	}Is a file present?\
{\listtext	\uc0\u8226 	}Does a command run successfully?\
{\listtext	\uc0\u8226 	}Is the server listening on a given port?\
\pard\tx560\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
It\'92s not just the simple stuff either! With a little bit of scripting we can perform more advanced validation such a node failover. Being able to validate this type of operation is extreme valuable for the modern day DevOps Engineer.}